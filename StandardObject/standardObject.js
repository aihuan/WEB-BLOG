// 标准对象 Date 
// 获取当前系统时间
var now = new Date();
console.log(now);

// 月份是从0开始的 0~11 表示1-12月
// 第二种创建一个指定日期和时间的方法是解析一个符合ISO 8601格式的字符串：

var d = Date.parse('2015-06-24T19:49:22.875+08:00');
d; // 1435146562875

var d = new Date(1435146562875);
console.log(d.toLocaleString()); // '2015/6/24 下午7:49:22'，本地时间（北京时区+8:00），显示的字符串与操作系统设定的格式有关
d.toUTCString(); // 'Wed, 24 Jun 2015 11:49:22 GMT'，UTC时间，与本地时间相差8小时


// 最重要的是时间戳 因为时间戳是从1970年1月1日开始的 那么如何获得时间戳呢？
if (Date.now) {
    console.log(Date.now());
} else {
    console.log(new Date().getTime());
}

// RegExp 正则表达式 字符来描述字符w
/*判断一个字符串是否符合邮箱
1.创建一个匹配Email的字符表达式
2.用该正则表达式去匹配用户的输入来判断是否合法
*/
/*正则表达式 
 \d可以匹配一个数字，\w可以匹配一个字母或数字，所以：
 .'00\d' 可以匹配'007',但无法匹配'00A'
 .'\d\d\d' 可以匹配'010'
 .\w\w  可以匹配js
 .可以匹配任何字符  'js.' 可以匹配'jsp' 'jsj'
*/
// 匹配变长的字符用 * 表示任意个字符（包括0个），用+表示至少一个 用？表示0个或1个 用{n} 表示n个字符用{n,m}表示n-m个字符

// 表示区号 前三 后最多3-8位
// \d{3}\s+\d{3,8}
// 进阶正则表达式  

/*\d 表示一个数字 \w表示一个数字或字符*/